{"ast":null,"code":"var _jsxFileName = \"/Users/kesu/Desktop/flixclone/flixclone/src/Banner.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport requests from './requests';\nimport \"./banner.css\"; // state variable called movie that is going to store the random movie we fetch from TMDB\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Banner() {\n  _s();\n\n  const [movie, setMovie] = useState([]); // useEffect that is going to fetch a given movie from TMDB. W\n\n  useEffect(() => {\n    //         async function which will allows us to make a request and only when the request is successful\n    // can we proceed\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals); //  use random math method to create function that gets a random movie from the list.\n      // This will allow the app to show a different movie every time we refresh the webapp.\n\n      setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]);\n      return request;\n    }\n\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return (str === null || str === void 0 ? void 0 : str.length) > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"banner\" // style centers and cover the whole screen. Call base url and our backdrop banner path\n    ,\n    style: {\n      backgroundSize: \"cover\",\n      backgroundImage: `url(\n            \"https://image.tmdb.org/t/p/original/${movie === null || movie === void 0 ? void 0 : movie.backdrop_path}\"\n        )`,\n      backgroundPosition: \"center center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"banner__contents\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"banner__title\",\n        children: (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.original_name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner__buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"banner__button\",\n          children: \"Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"banner__button\",\n          children: \"Pirate List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"banner__description\",\n        children: truncate(movie === null || movie === void 0 ? void 0 : movie.overview, 150)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"banner--fadeBottom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Banner, \"jmRb9xsBKsoKCGHCjtfP3JDQESc=\");\n\n_c = Banner;\nexport default Banner;\n\nvar _c;\n\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["React","useState","useEffect","axios","requests","Banner","movie","setMovie","fetchData","request","get","fetchNetflixOriginals","data","results","Math","floor","random","length","truncate","str","n","substr","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview"],"sources":["/Users/kesu/Desktop/flixclone/flixclone/src/Banner.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport requests from './requests';\nimport \"./banner.css\";\n\n// state variable called movie that is going to store the random movie we fetch from TMDB\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    // useEffect that is going to fetch a given movie from TMDB. W\n    useEffect(() => {\n//         async function which will allows us to make a request and only when the request is successful\n// can we proceed\n        async function fetchData(){\nconst request = await axios.get(requests.fetchNetflixOriginals);\n//  use random math method to create function that gets a random movie from the list.\n// This will allow the app to show a different movie every time we refresh the webapp.\nsetMovie(\n    request.data.results[\n        Math.floor(Math.random() * request.data.results.length - 1 )\n    ]\n);\nreturn request;\n\n        }\n        fetchData();\n    }, []);\n\n    function truncate(str, n){\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n  return (\n    <header className='banner'\n    // style centers and cover the whole screen. Call base url and our backdrop banner path\n    style = {{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n    }}\n  \n    >\n        <div className=\"banner__contents\">\n        <h1 className='banner__title'>\n        {/* protects us from any error that may happen */}\n        {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className='banner__buttons'>\n            <button className=\"banner__button\">Play</button>\n            <button className='banner__button'>Pirate List</button>\n        </div>\n\n        <h1 className='banner__description'>{truncate(movie?.overview, 150)}</h1>\n        </div>\n   <div className='banner--fadeBottom'></div>\n    </header>\n  )\n}\n\nexport default Banner"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,cAAP,C,CAEA;;;;AACA,SAASC,MAAT,GAAkB;EAAA;;EACd,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC,CADc,CAGd;;EACAC,SAAS,CAAC,MAAM;IACpB;IACA;IACQ,eAAeM,SAAf,GAA0B;MAClC,MAAMC,OAAO,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,QAAQ,CAACO,qBAAnB,CAAtB,CADkC,CAElC;MACA;;MACAJ,QAAQ,CACJE,OAAO,CAACG,IAAR,CAAaC,OAAb,CACIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,OAAO,CAACG,IAAR,CAAaC,OAAb,CAAqBI,MAArC,GAA8C,CAAzD,CADJ,CADI,CAAR;MAKA,OAAOR,OAAP;IAES;;IACDD,SAAS;EACZ,CAhBQ,EAgBN,EAhBM,CAAT;;EAkBA,SAASU,QAAT,CAAkBC,GAAlB,EAAuBC,CAAvB,EAAyB;IACrB,OAAO,CAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEF,MAAL,IAAcG,CAAd,GAAkBD,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcD,CAAC,GAAG,CAAlB,IAAuB,KAAzC,GAAiDD,GAAxD;EACH;;EACH,oBACE;IAAQ,SAAS,EAAC,QAAlB,CACA;IADA;IAEA,KAAK,EAAI;MACLG,cAAc,EAAE,OADX;MAELC,eAAe,EAAG;AAC1B,mDAAmDjB,KAD1B,aAC0BA,KAD1B,uBAC0BA,KAAK,CAAEkB,aAAc;AACxE,UAJa;MAKLC,kBAAkB,EAAE;IALf,CAFT;IAAA,wBAWI;MAAK,SAAS,EAAC,kBAAf;MAAA,wBACA;QAAI,SAAS,EAAC,eAAd;QAAA,UAEC,CAAAnB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEoB,KAAP,MAAgBpB,KAAhB,aAAgBA,KAAhB,uBAAgBA,KAAK,CAAEqB,IAAvB,MAA+BrB,KAA/B,aAA+BA,KAA/B,uBAA+BA,KAAK,CAAEsB,aAAtC;MAFD;QAAA;QAAA;QAAA;MAAA,QADA,eAKA;QAAK,SAAS,EAAC,iBAAf;QAAA,wBACI;UAAQ,SAAS,EAAC,gBAAlB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAQ,SAAS,EAAC,gBAAlB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QALA,eAUA;QAAI,SAAS,EAAC,qBAAd;QAAA,UAAqCV,QAAQ,CAACZ,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEuB,QAAR,EAAkB,GAAlB;MAA7C;QAAA;QAAA;QAAA;MAAA,QAVA;IAAA;MAAA;MAAA;MAAA;IAAA,QAXJ,eAuBD;MAAK,SAAS,EAAC;IAAf;MAAA;MAAA;MAAA;IAAA,QAvBC;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA2BD;;GApDQxB,M;;KAAAA,M;AAsDT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}